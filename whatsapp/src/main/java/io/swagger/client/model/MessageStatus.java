/*
 * WhatsApp API
 * A RESTful API for a WhatsApp clone application.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;

/**
 * MessageStatus
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-04-15T13:46:39.360Z")
public class MessageStatus {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("messageId")
  private UUID messageId = null;

  @SerializedName("userId")
  private UUID userId = null;

  /**
   * The status of the message.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SENT("sent"),
    
    DELIVERED("delivered"),
    
    READ("read");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  public MessageStatus id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * The message status&#39;s UUID.
   * @return id
  **/
  @ApiModelProperty(value = "The message status's UUID.")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public MessageStatus messageId(UUID messageId) {
    this.messageId = messageId;
    return this;
  }

   /**
   * The UUID of the message.
   * @return messageId
  **/
  @ApiModelProperty(value = "The UUID of the message.")
  public UUID getMessageId() {
    return messageId;
  }

  public void setMessageId(UUID messageId) {
    this.messageId = messageId;
  }

  public MessageStatus userId(UUID userId) {
    this.userId = userId;
    return this;
  }

   /**
   * The UUID of the user for whom the message status is tracked.
   * @return userId
  **/
  @ApiModelProperty(value = "The UUID of the user for whom the message status is tracked.")
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(UUID userId) {
    this.userId = userId;
  }

  public MessageStatus status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the message.
   * @return status
  **/
  @ApiModelProperty(value = "The status of the message.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public MessageStatus timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp when the message status was last updated.
   * @return timestamp
  **/
  @ApiModelProperty(value = "The timestamp when the message status was last updated.")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageStatus messageStatus = (MessageStatus) o;
    return Objects.equals(this.id, messageStatus.id) &&
        Objects.equals(this.messageId, messageStatus.messageId) &&
        Objects.equals(this.userId, messageStatus.userId) &&
        Objects.equals(this.status, messageStatus.status) &&
        Objects.equals(this.timestamp, messageStatus.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, messageId, userId, status, timestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageStatus {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

