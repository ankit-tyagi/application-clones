/*
 * WhatsApp API
 * A RESTful API for a WhatsApp clone application.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;

/**
 * Message
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-04-15T13:46:39.360Z")
public class Message {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("chatId")
  private UUID chatId = null;

  @SerializedName("senderId")
  private UUID senderId = null;

  @SerializedName("content")
  private String content = null;

  /**
   * The type of the message.
   */
  @JsonAdapter(MessageTypeEnum.Adapter.class)
  public enum MessageTypeEnum {
    TEXT("text"),
    
    IMAGE("image"),
    
    VIDEO("video"),
    
    AUDIO("audio"),
    
    FILE("file"),
    
    LOCATION("location");

    private String value;

    MessageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageTypeEnum fromValue(String text) {
      for (MessageTypeEnum b : MessageTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MessageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MessageTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("messageType")
  private MessageTypeEnum messageType = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  @SerializedName("isDeleted")
  private Boolean isDeleted = null;

  public Message id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * The message&#39;s UUID.
   * @return id
  **/
  @ApiModelProperty(value = "The message's UUID.")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public Message chatId(UUID chatId) {
    this.chatId = chatId;
    return this;
  }

   /**
   * The UUID of the chat where the message was sent.
   * @return chatId
  **/
  @ApiModelProperty(value = "The UUID of the chat where the message was sent.")
  public UUID getChatId() {
    return chatId;
  }

  public void setChatId(UUID chatId) {
    this.chatId = chatId;
  }

  public Message senderId(UUID senderId) {
    this.senderId = senderId;
    return this;
  }

   /**
   * The UUID of the user who sent the message.
   * @return senderId
  **/
  @ApiModelProperty(value = "The UUID of the user who sent the message.")
  public UUID getSenderId() {
    return senderId;
  }

  public void setSenderId(UUID senderId) {
    this.senderId = senderId;
  }

  public Message content(String content) {
    this.content = content;
    return this;
  }

   /**
   * The content of the message.
   * @return content
  **/
  @ApiModelProperty(value = "The content of the message.")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public Message messageType(MessageTypeEnum messageType) {
    this.messageType = messageType;
    return this;
  }

   /**
   * The type of the message.
   * @return messageType
  **/
  @ApiModelProperty(value = "The type of the message.")
  public MessageTypeEnum getMessageType() {
    return messageType;
  }

  public void setMessageType(MessageTypeEnum messageType) {
    this.messageType = messageType;
  }

  public Message timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The timestamp when the message was sent.
   * @return timestamp
  **/
  @ApiModelProperty(value = "The timestamp when the message was sent.")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public Message isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

   /**
   * Whether the message has been deleted.
   * @return isDeleted
  **/
  @ApiModelProperty(value = "Whether the message has been deleted.")
  public Boolean isIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.id, message.id) &&
        Objects.equals(this.chatId, message.chatId) &&
        Objects.equals(this.senderId, message.senderId) &&
        Objects.equals(this.content, message.content) &&
        Objects.equals(this.messageType, message.messageType) &&
        Objects.equals(this.timestamp, message.timestamp) &&
        Objects.equals(this.isDeleted, message.isDeleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, chatId, senderId, content, messageType, timestamp, isDeleted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

